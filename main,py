# auto install modules
try:
    from discord.ext import commands
    from colorama import Fore
    import discord
except ModuleNotFoundError:
    import os
    os.system('pip install discord')
    os.system('pip install colorama')

    # if program fails to auto install requirements
    # run this in your terminal (with pip 3.11)
    # pip install -r requirements.txt

from discord.ext import commands
from discord import app_commands
from colorama import Fore
import time
import discord

bot = commands.Bot(command_prefix='$', intents=discord.Intents.all())


# RUN IN 3.11 
# As of this momment discord 3.12 is not supported yet (aiohttp has major bug in 3.12)

@bot.event
async def on_ready():
    print(Fore.LIGHTGREEN_EX, f"Ready and online - {bot.user.display_name}\n", Fore.RESET)

    # Lists every guild the bot is in

    try:
        guild_count = 0

        for guild in bot.guilds:
            print(Fore.RED, f"- {guild.id} (name: {guild.name})\n", Fore.RESET)

            guild_count = guild_count + 1

        print(Fore.GREEN, f"{bot.user.display_name} is in " + str(guild_count) + " guilds.\n", Fore.RESET)

        synced = await bot.tree.sync() # Loads/syncs commands
        print(f"Synced {len(synced)} command(s)")

    except Exception as e:
        print(e)


# Simple Test command
@bot.tree.command(name="hello")
async def hello(interaction: discord.Interaction):
    await interaction.response.send_message(f"wsg {interaction.user.mention}", ephemeral=True)
    print(Fore.CYAN, f"/hello | Executed By {discord.Interaction.user}", Fore.RESET)


# Repeats what you say 
@bot.tree.command(name="say")
@app_commands.describe(thing_2_say="What should I say??")
async def say(interaciton: discord.Interaction, thing_2_say: str):
    await interaciton.response.send_message(f"{thing_2_say}")
    print(Fore.CYAN, f"/say {thing_2_say} | Executed By {discord.Interaction.user}", Fore.RESET)


# Nukes/purges the channel you run the command in
@bot.tree.command(name="nuke")
@app_commands.describe(thing_2_say="Nukes the channel your in")
@app_commands.checks.has_permissions(manage_channels=True, manage_messages=True)
async def nuke(interaction: discord.Interaction):
    await interaction.channel.delete()
    new_channel = await interaction.channel.clone(reason="Channel was purged")
    await new_channel.edit(position=interaction.channel.position)
    await new_channel.send(f"This Channel was purged.")

    print(Fore.RED, f'Purged {interaction.channel} | Executed By {discord.Interaction.user}', Fore.RESET)

@nuke.error
async def nuke_error(interaction: discord.Interaction):
    await interaction.response.send_message("Insufficient Permissions", ephemeral=True)
    print(Fore.RED, f'/nuke {interaction.channel} | Insufficient Perms | Executed By {discord.Interaction.user}', Fore.RESET)


# Nukes/Purges every single channel in the guild
@bot.tree.command(name="nuke_everything")
@app_commands.describe(thing_2_say="Nukes every Channel (dont do this)")
@app_commands.checks.has_permissions(administrator=True) # administrator Needed
async def nuke_everything(interaction: discord.Interaction):
    text_channel_list = []

    for channel in bot.guild.text_channels:
        text_channel_list.append(channel)

    for x in text_channel_list:
        await interaction.channel.delete()
        new_channel = await interaction.channel.clone(reason="Channel was purged")
        await new_channel.edit(position=interaction.channel.position)
        await new_channel.send(f"Purged by me")

@nuke_everything.error
async def nuke_all_error(interaction: discord.Interaction):
    await interaction.response.send_message("Insufficient Permissions", ephemeral=True)
    print(Fore.RED, f'/nuke_everything {interaction.channel} | Insufficient Perms | Executed By {discord.Interaction.user}', Fore.RESET)


# This command Deletes every single channel in the guild
@bot.tree.command(name="delete")
@app_commands.describe(thing_2_say="DELETES every channel (dont do this)")
@app_commands.checks.has_permissions(administrator=True) # administrator Needed
async def delete(interaction: discord.Interaction):
    text_channel_list = []
        
    for channel in bot.guild.text_channels:
        text_channel_list.append(channel)

    for x in text_channel_list:
        await interaction.channel.delete(x)
        time.sleep(0.1)

@delete.error
async def delete_error(interaction: discord.Interaction):
    await interaction.response.send_message("Insufficient Permissions", ephemeral=True)
    print(Fore.RED, f'/delete {interaction.channel} | Insufficient Perms | Executed By {discord.Interaction.user}', Fore.RESET)


token = 'BOT_TOKEN_HERE'
bot.run(token)
